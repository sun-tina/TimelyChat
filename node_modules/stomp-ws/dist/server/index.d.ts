/// <reference types="node" />
import http from "http";
import { ClientFrame, ConnectFrame, ServerFrame } from "../common/type";
interface Options {
    readonly server: http.Server;
    readonly path?: string;
    readonly clientHeartBeat?: number;
    readonly serverHeartBeat?: number;
    readonly getSession: (frame: ConnectFrame) => string | Promise<string>;
    readonly onClose: (session: string) => void;
}
declare type Listener = (frame: ClientFrame, session: string) => boolean | Promise<boolean>;
declare class Server {
    readonly options: Options;
    private wss?;
    private readonly _sockets;
    private readonly _listeners;
    private readonly _sessionListeners;
    constructor(options: Options);
    send(session: string, frame: ServerFrame): void;
    listen(session: string, fn: Listener): Promise<ClientFrame>;
    listen(fn: Listener): Promise<ClientFrame>;
    close(session: string): void;
    private _getSocket;
    private heartBeat;
    start(): void;
    stop(): void;
}
export default Server;
//# sourceMappingURL=index.d.ts.map