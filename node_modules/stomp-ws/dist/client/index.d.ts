import type { ClientFrame, ServerFrame } from "../common/type";
interface Options {
    readonly host?: string;
    readonly clientHeartBeat?: number;
    readonly serverHeartBeat?: number;
}
declare type Listener = (frame: ServerFrame) => boolean | Promise<boolean>;
declare class Connection {
    readonly url: string;
    readonly options?: Options | undefined;
    private ws?;
    private _connected;
    private _lastSend;
    private _lastRecv;
    constructor(url: string, options?: Options | undefined);
    send(frame: ClientFrame): void;
    listen(fn: Listener): Promise<ServerFrame | undefined>;
    close(): void;
    get connected(): boolean;
    private get host();
    private handleError;
    private heartBeat;
    connect(): Promise<void>;
}
export default Connection;
//# sourceMappingURL=index.d.ts.map